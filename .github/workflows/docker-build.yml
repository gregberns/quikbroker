name: Docker Build and Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  FLY_REGISTRY: registry.fly.io
  IMAGE_NAME: ${{ github.repository }}
  FLY_APP: quikbroker
  FLY_APP_DB: quikbroker-db

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for app image
        id: app-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
          labels: |
            org.opencontainers.image.title=app
            org.opencontainers.image.description=app image for QuikBroker
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.visibility=private

      - name: Build and push app image to GitHub Registry
        id: build-app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/app/Dockerfile
          push: true
          tags: ${{ steps.app-meta.outputs.tags }}
          labels: ${{ steps.app-meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:buildcache,mode=max

      - name: Set app image tag
        id: set-app-tag
        run: |
          if [[ "${{ steps.app-meta.outputs.tags }}" == *"latest"* ]]; then
            echo "APP_IMAGE_TAG=latest" >> $GITHUB_ENV
          else
            FIRST_TAG=$(echo "${{ steps.app-meta.outputs.tags }}" | cut -d',' -f1)
            echo "APP_IMAGE_TAG=$FIRST_TAG" >> $GITHUB_ENV
          fi
          echo "Using app image tag: $APP_IMAGE_TAG"
