name: QuikBroker CI/CD Pipeline

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Database connection variables for migrations
  DB_HOST: ${{ vars.DB_HOST }}
  DB_PORT: ${{ vars.DB_PORT || '5432' }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_USER: ${{ vars.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  # Railway deployment variables
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  # Job to determine the overall workflow context
  prepare:
    name: Prepare Pipeline
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}

    steps:
      - name: Check deployment conditions
        id: check
        run: |
          # Determine if we should deploy based on event type and branch
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

          # Set the environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

          echo "Event: ${{ github.event_name }}, Ref: ${{ github.ref }}"

  # Build all Docker images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write
    outputs:
      migrations_image: ${{ steps.migrations-tag.outputs.image }}
      app_image: ${{ steps.app-tag.outputs.image }}
      mclookup_image: ${{ steps.mclookup-tag.outputs.image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build migrations image
      - name: Extract metadata for migrations image
        id: migrations-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/migrations
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
          # Output a single tag for easy processing
          sep-tags: ","
          sep-labels: ","

      - name: Build and push migrations image
        id: build-migrations
        uses: docker/build-push-action@v5
        with:
          context: ./packages/migrations
          file: ./packages/migrations/Dockerfile
          push: true
          tags: ${{ steps.migrations-meta.outputs.tags }}
          labels: ${{ steps.migrations-meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/migrations:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/migrations:buildcache,mode=max

      - name: Set migrations image tag
        id: migrations-tag
        run: |
          # Extract first tag (now using comma as separator)
          FIRST_TAG=$(echo "${{ steps.migrations-meta.outputs.tags }}" | cut -d',' -f1 | xargs)
          echo "image=$FIRST_TAG" >> $GITHUB_OUTPUT
          echo "Using migrations image tag: $FIRST_TAG"

      # Build app image
      - name: Extract metadata for app image
        id: app-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
          # Output a single tag for easy processing
          sep-tags: ","
          sep-labels: ","

      - name: Build and push app image
        id: build-app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/app/Dockerfile
          push: true
          tags: ${{ steps.app-meta.outputs.tags }}
          labels: ${{ steps.app-meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/app:buildcache,mode=max

      - name: Set app image tag
        id: app-tag
        run: |
          # Extract first tag (now using comma as separator)
          FIRST_TAG=$(echo "${{ steps.app-meta.outputs.tags }}" | cut -d',' -f1 | xargs)
          echo "image=$FIRST_TAG" >> $GITHUB_OUTPUT
          echo "Using app image tag: $FIRST_TAG"
          
      # Build mclookup image
      - name: Extract metadata for mclookup image
        id: mclookup-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mclookup
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
          # Output a single tag for easy processing
          sep-tags: ","
          sep-labels: ","

      - name: Build and push mclookup image
        id: build-mclookup
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/mclookup/Dockerfile
          push: true
          tags: ${{ steps.mclookup-meta.outputs.tags }}
          labels: ${{ steps.mclookup-meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mclookup:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mclookup:buildcache,mode=max

      - name: Set mclookup image tag
        id: mclookup-tag
        run: |
          # Extract first tag (now using comma as separator)
          FIRST_TAG=$(echo "${{ steps.mclookup-meta.outputs.tags }}" | cut -d',' -f1 | xargs)
          echo "image=$FIRST_TAG" >> $GITHUB_OUTPUT
          echo "Using mclookup image tag: $FIRST_TAG"

  # Run tests (if any)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add your test steps here if needed
      - name: No tests configured
        run: echo "No tests are currently configured. This is a placeholder."

  # Run database migrations
  # migrate:
  #   name: Run Database Migrations
  #   runs-on: ubuntu-latest
  #   needs: [prepare, build, test]
  #   if: needs.prepare.outputs.should_deploy == 'true'
  #   environment: ${{ needs.prepare.outputs.environment }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Run migrations
  #       run: |
  #         echo "Running migrations using image: ${{ needs.build.outputs.migrations_image }}"

  #         # Pull the migrations image
  #         docker pull ${{ needs.build.outputs.migrations_image }}

  #         echo "Environment: " ${{ needs.prepare.outputs.environment }}
  #         echo "DB_HOST: " ${{ env.DB_HOST }}
  #         echo "DB_PORT: " ${{ env.DB_PORT }}
  #         echo "DB_NAME: " ${{ env.DB_NAME }}
  #         echo "DB_USER: " ${{ env.DB_USER }}

  #         # Run the migrations container with environment variables
  #         docker run --rm \
  #           -e DB_HOST=${{ env.DB_HOST }} \
  #           -e DB_PORT=${{ env.DB_PORT }} \
  #           -e DB_NAME=${{ env.DB_NAME }} \
  #           -e DB_USER=${{ env.DB_USER }} \
  #           -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
  #           -e SQITCH_TARGET=db:pg://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/${{ env.DB_NAME }}
  #           ${{ needs.build.outputs.migrations_image }} deploy

  # Deploy the application to Railway
  # deploy:
  #   name: Deploy to Railway
  #   runs-on: ubuntu-latest
  #   # needs: [prepare, build, migrate]
  #   needs: [prepare, build, tests]
  #   if: needs.prepare.outputs.should_deploy == 'true'
  #   environment: ${{ needs.prepare.outputs.environment }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install Railway CLI
  #       run: npm install -g @railway/cli

  #     - name: Set up Railway Token
  #       run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

  #     - name: Deploy to Railway
  #       run: |
  #         echo "Deploying app image to Railway: ${{ needs.build.outputs.app_image }}"

  #         # Link to the Railway project
  #         railway link ${{ secrets.RAILWAY_PROJECT_ID }}

  #         # Deploy the container image to Railway
  #         railway service ${{ secrets.RAILWAY_SERVICE_ID }} \
  #           variables set \
  #           RAILWAY_DOCKERFILE_PATH=./packages/app/Dockerfile \
  #           RAILWAY_DOCKERFILE_IMAGE=${{ needs.build.outputs.app_image }}

  #         # Trigger deployment
  #         railway up --service ${{ secrets.RAILWAY_SERVICE_ID }} --detach

  #         echo "Deployment triggered successfully"

  # Build and deploy the mclookup static site to Railway
  # deploy-mclookup:
  #   name: Deploy MCLookup to Railway
  #   runs-on: ubuntu-latest
  #   needs: [prepare]
  #   if: needs.prepare.outputs.should_deploy == 'true'
  #   environment: ${{ needs.prepare.outputs.environment }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         cache: "yarn"

  #     - name: Install dependencies
  #       run: |
  #         corepack enable
  #         yarn install --frozen-lockfile

  #     - name: Build static site
  #       run: |
  #         cd packages/mclookup
  #         yarn build

  #     # - name: Deploy Railway
  #     #   uses: bervProject/railway-deploy@main
  #     #   env:
  #     #     RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  #     #   with:
  #     #     service: "beneficial-magic"
  #     #     detach: "false"

  #     - name: Install Railway CLI
  #       run: npm install -g @railway/cli

  #     - name: Deploy to Railway
  #       run: |
  #         service="beneficial-magic"
  #         error_code=0
  #         # railwayCmd="railway up --service ${{ secrets.RAILWAY_MCLOOKUP_SERVICE_ID }} "beneficial-magic""
  #         railwayCmd="railway up --service ${{ secrets.RAILWAY_MCLOOKUP_SERVICE_ID }}"
  #         eval $railwayCmd || error_code=$?

  #         if [ "${error_code}" -ne 0 ]; then
  #             exit $error_code
  #         else
  #             echo "status=Success" >> $GITHUB_OUTPUT
  #         fi
