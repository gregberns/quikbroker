import { z } from "zod";
import * as db from "zapatos/db";
import type * as s from "zapatos/schema";
import { sql } from "../client";

// Zod schema for FMCSA carrier lookup input
export const fmcsaLookupSchema = z.object({
  dot_number: z.string().optional(),
  legal_name: z.string().optional(),
  dba_name: z.string().optional(),
  state: z.string().optional(),
  limit: z.number().positive().default(10),
  offset: z.number().min(0).default(0),
});

export type FMCSALookupInput = z.infer<typeof fmcsaLookupSchema>;

// Add a type for the FMCSA carrier view
// This would normally be generated by Zapatos, but we're adding it manually for this example
export interface FMCSACarrier {
  dot_number: string;
  legal_name: string | null;
  dba_name: string | null;
  carrier_operation: string | null;
  hm_flag: string | null;
  pc_flag: string | null;
  phy_street: string | null;
  phy_city: string | null;
  phy_state: string | null;
  phy_zip: string | null;
  phy_country: string | null;
  mailing_street: string | null;
  mailing_city: string | null;
  mailing_state: string | null;
  mailing_zip: string | null;
  mailing_country: string | null;
  telephone: string | null;
  fax: string | null;
  email_address: string | null;
  mcs150_date: string | null;
  mcs150_mileage: string | null;
  mcs150_mileage_year: string | null;
  add_date: string | null;
  oic_state: string | null;
  nbr_power_unit: string | null;
  driver_total: string | null;
  recent_mileage: string | null;
  recent_mileage_year: string | null;
  vmt_source_id: string | null;
  private_only: string | null;
  authorized_for_hire: string | null;
  exempt_for_hire: string | null;
  private_property: string | null;
  private_passenger_business: string | null;
  private_passenger_nonbusiness: string | null;
  migrant: string | null;
  us_mail: string | null;
  federal_government: string | null;
  state_government: string | null;
  local_government: string | null;
  indian_tribe: string | null;
  op_other: string | null;
}

// Query functions
export async function getFMCSACarrierByDotNumber(dotNumber: string): Promise<FMCSACarrier | null> {
  const result = await db.sql<FMCSACarrier[]>`
    SELECT * FROM app.fmcsa_carrier_view 
    WHERE dot_number = ${dotNumber}
    LIMIT 1
  `.run(sql);
  
  return result.length > 0 ? result[0] : null;
}

export async function searchFMCSACarriers(params: FMCSALookupInput): Promise<{ carriers: FMCSACarrier[], total: number }> {
  // Build conditions dynamically based on provided parameters
  const conditions: string[] = [];
  const values: any[] = [];
  let paramIndex = 1;
  
  if (params.dot_number) {
    conditions.push(`dot_number = $${paramIndex++}`);
    values.push(params.dot_number);
  }
  
  if (params.legal_name) {
    conditions.push(`legal_name ILIKE $${paramIndex++}`);
    values.push(`%${params.legal_name}%`);
  }
  
  if (params.dba_name) {
    conditions.push(`dba_name ILIKE $${paramIndex++}`);
    values.push(`%${params.dba_name}%`);
  }
  
  if (params.state) {
    conditions.push(`phy_state = $${paramIndex++}`);
    values.push(params.state);
  }
  
  const whereClause = conditions.length > 0 
    ? `WHERE ${conditions.join(' AND ')}` 
    : '';
  
  // Query for matching carriers with pagination
  const carriersQuery = `
    SELECT * FROM app.fmcsa_carrier_view 
    ${whereClause}
    ORDER BY dot_number
    LIMIT $${paramIndex++} OFFSET $${paramIndex++}
  `;
  
  // Query for total count
  const countQuery = `
    SELECT COUNT(*) as total FROM app.fmcsa_carrier_view 
    ${whereClause}
  `;
  
  // Execute both queries
  const carriers = await db.sql<FMCSACarrier[]>(carriersQuery, 
    ...values, params.limit, params.offset).run(sql);
  
  const totalResult = await db.sql<{total: number}[]>(countQuery, ...values).run(sql);
  const total = totalResult[0]?.total || 0;
  
  return {
    carriers,
    total
  };
}